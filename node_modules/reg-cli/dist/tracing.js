"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shutdownTracing = exports.initTracing = exports.getTracer = exports.createSyncSpan = exports.createSpan = void 0;
var _sdkNode = require("@opentelemetry/sdk-node");
var _exporterTraceOtlpHttp = require("@opentelemetry/exporter-trace-otlp-http");
var _api = require("@opentelemetry/api");
var sdk = null;
var isInitialized = false;
var createSDK = () => {
  var isJaegerEnabled = process.env.JAEGER_ENABLED === 'true';
  if (isJaegerEnabled) {
    var otlpExporter = new _exporterTraceOtlpHttp.OTLPTraceExporter({
      url: 'http://localhost:4318/v1/traces' // Jaeger OTLP endpoint
    });
    return new _sdkNode.NodeSDK({
      traceExporter: otlpExporter,
      serviceName: 'reg-cli',
      instrumentations: []
    });
  } else {
    return new _sdkNode.NodeSDK({
      serviceName: 'reg-cli',
      instrumentations: []
    });
  }
};
var initTracing = () => {
  if (!isInitialized) {
    sdk = createSDK();
    sdk.start();
    isInitialized = true;
    console.log('[Tracing] OpenTelemetry initialized with Jaeger enabled:', process.env.JAEGER_ENABLED);
  }
};
exports.initTracing = initTracing;
var shutdownTracing = async () => {
  if (sdk && isInitialized) {
    console.log('[Tracing] Starting SDK shutdown...');
    console.log('[Tracing] Waiting for traces to be exported...');

    // より長い時間を待ってからシャットダウンする
    await new Promise(resolve => setTimeout(resolve, 2000));
    await sdk.shutdown();
    isInitialized = false;
    sdk = null;
    console.log('[Tracing] OpenTelemetry SDK shut down');
  }
};
exports.shutdownTracing = shutdownTracing;
var getTracer = () => {
  return _api.trace.getTracer('reg-cli', '0.18.10');
};
exports.getTracer = getTracer;
var createSpan = async (name, fn) => {
  var tracer = getTracer();
  return tracer.startActiveSpan(name, async span => {
    try {
      console.log(`[Tracing] Starting span: ${name}`);
      var startTime = process.hrtime.bigint();
      var result = await fn();
      var endTime = process.hrtime.bigint();
      var durationMs = Number(endTime - startTime) / 1000000;
      span.setStatus({
        code: 1
      }); // Success
      span.setAttributes({
        'reg.operation': name,
        'reg.duration': durationMs
      });
      console.log(`[Tracing] Completed span: ${name} (${durationMs.toFixed(2)}ms)`);
      return result;
    } catch (err) {
      console.log(`[Tracing] Error in span: ${name}`, err);
      span.setStatus({
        code: 2,
        message: err.message
      }); // Error
      span.recordException(err);
      throw err;
    } finally {
      span.end();
    }
  });
};
exports.createSpan = createSpan;
var createSyncSpan = (name, fn) => {
  var tracer = getTracer();
  return tracer.startActiveSpan(name, span => {
    try {
      console.log(`[Tracing] Starting sync span: ${name}`);
      var startTime = process.hrtime.bigint();
      var result = fn();
      var endTime = process.hrtime.bigint();
      var durationMs = Number(endTime - startTime) / 1000000;
      span.setStatus({
        code: 1
      }); // Success
      span.setAttributes({
        'reg.operation': name,
        'reg.duration': durationMs,
        'reg.type': 'sync'
      });
      console.log(`[Tracing] Completed sync span: ${name} (${durationMs.toFixed(2)}ms)`);
      return result;
    } catch (err) {
      console.log(`[Tracing] Error in sync span: ${name}`, err);
      span.setStatus({
        code: 2,
        message: err.message
      }); // Error
      span.recordException(err);
      throw err;
    } finally {
      span.end();
    }
  });
};
exports.createSyncSpan = createSyncSpan;